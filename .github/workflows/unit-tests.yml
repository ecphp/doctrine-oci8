# https://help.github.com/en/categories/automating-your-workflow-with-github-actions

on:
    - pull_request
    - push

name: "Continuous Integration"

jobs:
    run:
        name: "Unit tests"
        runs-on: ${{ matrix.operating-system }}
        strategy:
            fail-fast: false
            matrix:
                operating-system: [ubuntu-latest]
                php-versions: ['7.4']

        steps:
            - name: Set git to use LF
              run: |
                  git config --global core.autocrlf false
                  git config --global core.eol lf

            - name: Checkout
              uses: actions/checkout@master
              with:
                  fetch-depth: 1

            - name: Install PHP
              uses: shivammathur/setup-php@master
              with:
                  php-version: ${{ matrix.php-versions }}
                  extensions: xdebug,mbstring,oci8

            - name: Get Composer Cache Directory
              id: composer-cache
              run: echo "::set-output name=dir::$(composer config cache-files-dir)"

            - name: Cache dependencies
              uses: actions/cache@v2.1.4
              with:
                  path: ${{ steps.composer-cache.outputs.dir }}
                  key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.json') }}
                  restore-keys: ${{ runner.os }}-composer-

            - name: Copy env file
              run: cp .env.example .env

            - name: Build docker stack
              run: docker-compose -f docker-compose.yaml up -d

            - name: Install dependencies
              run: docker-compose exec -T php composer install --no-progress --no-suggest --prefer-dist --optimize-autoloader

            - name: Wait for Oracle Database to finish setup
              run: |
                until docker-compose logs oracle_xe | grep "Database ready to use."; do echo "Waiting..." && sleep 5; done

            - name: Run test suite
              run: docker-compose exec -T php ./vendor/bin/phpunit --coverage-clover=build/logs/clover.xml

            - name: Send Scrutinizer data
              run: |
                  wget https://scrutinizer-ci.com/ocular.phar
                  php ocular.phar code-coverage:upload --format=php-clover build/logs/clover.xml
              continue-on-error: true

